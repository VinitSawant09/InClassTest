#https://github.com/VinitSawant09/InClassTest/blob/master/student

'''

Description about the code:
For bulk insertion of student data with random numbers, names(comprises of string "Student"+number) and course code I have
implemented Quick sort algorithm (assuming the right most element as the pivot element.)

Then arised the question of inserting a single data into already sorted records of students.
For this I implemented Insertion sort- (adding data in a sorted list obtained by using
quick sort earlier) as insertion sort is efficient than quick sort for already sorted list.

For the output : I have displayed the popped out first record with lowest student number.
After bulk adding of data using quick sort I have given the option to add more record 1 at a time and again
popping out the first record from the list with lowest student number and displaying the same .

Regarding validations i have put validations checking length of student number and
student course code when user is entering student record one at a time.
'''

import random
class Student:

    def __init__(self,it=[], number=[]):
        self.items = it
        self.numberl =number

    def add(self,sd):
        self.items.append(sd)
        self.numberl.append(sd.number)

    def partition(self, start, end):

        i = start - 1;
        pivot = self.items[end].number
        j = start;
        for j in range(start, end):
            if pivot > self.items[j].number:
                i = i + 1
                temp = StudentDetails(self.items[i].number, self.items[i].name, self.items[i].coursecode)
                self.items[i] = self.items[j]
                self.items[j] = temp
        temp = self.items[i+1]
        self.items[i + 1] = self.items[end]
        self.items[end] = temp
        return i + 1

    def quicksort(self,start, end):

        s= Student()
        if start < end:
            q = s.partition(start, end)
            s.quicksort(start, q - 1)
            s.quicksort(q + 1, end)
        return self.items

    def retrieve(self):
        lengthOfRecords = len(self.items)
        start =0
        end = lengthOfRecords -1
        finalList = []
        s = Student()
        finalList = s.quicksort(start, end)
        print("The following is the record of the student with lowest student number :")
        print("Name: %s Number : %i Course : %s" % (finalList[0].name, finalList[0].number, finalList[0].coursecode))
        finalList.pop(0)

       # for i in range(0, len(finalList)):
            #  print("Name: %s Number : %i Course : %s" % (finalList[i].name, finalList[i].number, finalList[i].coursecode))
       # return finalList

        # self.numberl.sort()
        #for j in range(0, lengthOfRecords):
        #  for i in range(0, lengthOfRecords):
        #     if self.numberl[j] == self.items[i].number:
        #        print("Name: %s Number : %i Course : %s" % (self.items[i].name, self.items[i].number, self.items[i].coursecode))

    def insertionsort(self):
        l = len(self.items)

        for i in range(1, l):
            j = i
            while j > 0 and self.items[j - 1].number > self.items[j].number:
                temp = self.items[j]
                self.items[j] =self.items[j - 1]
                self.items[j - 1] = temp
                j = j - 1
        print("The following is the record of the student with lowest student number :")
        print("Name: %s Number : %i Course : %s" % (self.items[0].name, self.items[0].number, self.items[0].coursecode))
        self.items.pop(0)



class StudentDetails:

    def __init__(self, no, name, coursecode):
        self.number = no
        self.name = name
        self.coursecode = coursecode

#more = ''
#s= Student()

#while True:

for x in range(0, 10000):
    # number = int(input("Enter student number"))
     number = random.randint(10000000, 99999999)
    # snumber = str(number)
    # if len(snumber)!= 8:
    #    print("Invalid student number. ")

    # name = input("Enter student name")
     name = "Student-%i"%number

    # coursecode= input("Enter course code")
     coursecode = "abcdefg"
     if len(coursecode) != 7:
          print("Invalid course number. ")
     sd = StudentDetails(number, name, coursecode)
     s = Student()
     s.add(sd)

s.retrieve()

# For inserting more records single at a time in an already sorted list of records
more = input("Do you want to add more records to the already existing student record?")
while more!='no':
 #   number =  random.randint(10000000, 99999999)
    number = int(input("Enter Student number"))
    while len(str(number)) != 8:
        number = int(input("Student number should be 8 digits.!  Enter Student number again"))
    name = input("Enter Student name")
 #  name = "Student-%i" % number
 #   coursecode = "abcdefg"
    coursecode = input("Enter Course")
    while len(str(coursecode)) != 7:
        coursecode = input("Course code should be of 7 characters.!  Enter Course code again")
    sd = StudentDetails(number, name, coursecode)
    s.add(sd)
    s.insertionsort()
    more = input("Do you want to add more records ?")





